// assets/js/visitor-register.js

// URL ‡∏Ç‡∏≠‡∏á API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á iBeacon tags
const GET_IBEACONS_API_URL = '../../backend/staff/api/get_ibeacons.php';

// URL ‡∏Ç‡∏≠‡∏á API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°
const REGISTER_VISITOR_API_URL = '../../backend/staff/api/register_visitors.php';

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
let uploadedFileData = null;
let currentGroupMethod = 'file'; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô
let manualGroupMembers = [];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î iBeacons ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ available tags
async function loadIBeacons() {
    const beaconDropdownIds = ['visitorBeacon', 'groupBeacon'];

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î"
    beaconDropdownIds.forEach(id => {
        const select = document.getElementById(id);
        if (select) {
            select.innerHTML = '<option value="">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î iBeacon...</option>';
        }
    });

    try {
        const response = await fetch(GET_IBEACONS_API_URL, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const result = await response.json();

        if (result.status === 'success' && Array.isArray(result.data)) {
            beaconDropdownIds.forEach(id => {
                const select = document.getElementById(id);
                if (!select) return;

                select.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å iBeacon (Available)</option>';

                result.data.forEach(beacon => {
                    const option = document.createElement('option');
                    
                    // ‚úÖ ‡πÉ‡∏´‡πâ value ‡πÄ‡∏õ‡πá‡∏ô UUID ‡πÄ‡∏ï‡πá‡∏° (8 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤ API ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô)
                    option.value = beacon.uuid;

                    // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠ tag + UUID ‡πÉ‡∏ô text
                    option.textContent = `${beacon.tag_name} (${beacon.uuid})`;

                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠
                    option.dataset.tagId = beacon.tag_id;
                    option.dataset.tagName = beacon.tag_name;
                    option.dataset.uuid = beacon.uuid;

                    select.appendChild(option);
                });
            });

            console.log('‚úÖ iBeacons loaded successfully:', result.data);
        } else {
            beaconDropdownIds.forEach(id => {
                const select = document.getElementById(id);
                if (!select) return;
                select.innerHTML = '<option value="">‡πÑ‡∏°‡πà‡∏û‡∏ö iBeacon ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>';
            });
            Swal.fire('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', result.message || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• iBeacon ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 'info');
        }
    } catch (error) {
        console.error('‚ùå Error loading iBeacons:', error);
        beaconDropdownIds.forEach(id => {
            const select = document.getElementById(id);
            if (select) {
                select.innerHTML = '<option value="">‡πÇ‡∏´‡∏•‡∏î iBeacon ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</option>';
            }
        });
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î iBeacon ‡πÑ‡∏î‡πâ: ${error.message}`, 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flatpickr
function setupBirthdateInput() {
    const birthdateInput = document.getElementById('visitorBirthdate');
    const ageDisplay = document.getElementById('ageDisplay');

    if (!birthdateInput || !ageDisplay) {
        console.error('Error: Birthdate input or age display element not found.');
        return;
    }

    flatpickr(birthdateInput, {
        dateFormat: "Y-m-d",
        locale: "th",
        onChange: function (selectedDates, dateStr, instance) {
            if (selectedDates.length > 0) {
                const birthDate = new Date(selectedDates[0]);
                const today = new Date();
                let age = today.getFullYear() - birthDate.getFullYear();
                const m = today.getMonth() - birthDate.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                    age--;
                }
                ageDisplay.textContent = `‡∏≠‡∏≤‡∏¢‡∏∏: ${age} ‡∏õ‡∏µ`;
            } else {
                ageDisplay.textContent = '';
            }
        }
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
function selectRegistrationType(type) {
    // ‡∏•‡∏ö active class ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å option
    document.querySelectorAll('.type-option').forEach(option => {
        option.classList.remove('active');
    });

    // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å form section
    document.querySelectorAll('.form-section').forEach(section => {
        section.classList.remove('active');
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° active class ‡πÉ‡∏´‡πâ option ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    event.currentTarget.classList.add('active');

    // ‡πÅ‡∏™‡∏î‡∏á form section ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (type === 'individual') {
        document.getElementById('individualForm').classList.add('active');
    } else if (type === 'group') {
        document.getElementById('groupForm').classList.add('active');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
async function addIndividualVisitor() {
    const firstName = document.getElementById('individualFirstName').value.trim();
    const lastName = document.getElementById('individualLastName').value.trim();
    const gender = document.getElementById('individualGender').value;
    const beaconElement = document.getElementById('visitorBeacon');
    const beaconUUID = beaconElement.value;
    const birthdate = document.getElementById('visitorBirthdate').value;

    // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('=== INDIVIDUAL REGISTRATION DEBUG ===');
    console.log('firstName:', firstName);
    console.log('lastName:', lastName);
    console.log('gender:', gender);
    console.log('birthdate:', birthdate);
    console.log('beaconElement:', beaconElement);
    console.log('beaconUUID:', beaconUUID);
    console.log('beaconElement.selectedIndex:', beaconElement.selectedIndex);
    if (beaconElement.selectedIndex > 0) {
        const selectedOption = beaconElement.options[beaconElement.selectedIndex];
        console.log('selectedOption:', selectedOption);
        console.log('selectedOption.value:', selectedOption.value);
        console.log('selectedOption.text:', selectedOption.text);
        console.log('selectedOption data-uuid:', selectedOption.getAttribute('data-uuid'));
    }

    if (!firstName || !lastName || !birthdate || !gender || !beaconUUID) {
        Swal.fire('‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'warning');
        return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
    const birthDateObj = new Date(birthdate);
    const today = new Date();
    let age = today.getFullYear() - birthDateObj.getFullYear();
    const m = today.getMonth() - birthDateObj.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDateObj.getDate())) {
        age--;
    }

    const data = {
        type: 'individual',
        first_name: firstName,
        last_name: lastName,
        age: age,
        gender: gender,
        uuid: beaconUUID
    };

    console.log('üì§ Payload to send:', data);

    try {
        const response = await fetch(REGISTER_VISITOR_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ debug response
        console.log('üì° Response status:', response.status);
        console.log('üì° Response ok:', response.ok);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Server error response:', errorText);
            Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'error');
            return;
        }

        const result = await response.json();
        console.log('üì• Server response:', result);

        if (result.status === 'success') {
            Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', result.message, 'success');
            if (typeof loadDeviceTableByType === 'function') {
                loadDeviceTableByType();
            }
            if (typeof loadDashboardStats === 'function') {
                loadDashboardStats();
            }

            // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            document.getElementById('individualFirstName').value = '';
            document.getElementById('individualLastName').value = '';
            document.getElementById('visitorBirthdate').value = '';
            document.getElementById('ageDisplay').textContent = '';
            document.getElementById('individualGender').value = '';
            document.getElementById('visitorBeacon').value = '';

            // ‡πÇ‡∏´‡∏•‡∏î iBeacons ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            await loadIBeacons();
        } else {
            Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', result.message, 'error');
        }
    } catch (err) {
        console.error('‚ùå Error:', err);
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', 'error');
    }
}

// Group method selection
function selectGroupMethod(method) {
    currentGroupMethod = method;

    // Remove active class from all method options
    document.querySelectorAll('.method-option').forEach(el => el.classList.remove('active'));

    // Add active class to the clicked option
    const clickedOption = document.querySelector(`.method-option[onclick*="'${method}'"]`);
    if (clickedOption) {
        clickedOption.classList.add('active');
    }

    // Get the sections to show/hide
    const fileUploadSection = document.getElementById('fileUploadSection');
    const groupAddManualSection = document.getElementById('groupAddManualSection');

    // ‡∏•‡∏ö class active ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á section
    fileUploadSection.classList.remove('active');
    groupAddManualSection.classList.remove('active');

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° class active ‡πÉ‡∏´‡πâ section ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (method === 'file') {
        fileUploadSection.classList.add('active');
    } else if (method === 'manual') {
        groupAddManualSection.classList.add('active');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô
function addGroupMember() {
    const firstName = document.getElementById('memberFirstName').value.trim();
    const lastName = document.getElementById('memberLastName').value.trim();
    const age = parseInt(document.getElementById('memberAge').value);
    const gender = document.getElementById('memberGender').value;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!firstName || !lastName || !age || !gender) {
        Swal.fire('‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'warning');
        return;
    }

    if (age < 0 || age > 150) {
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-150 ‡∏õ‡∏µ', 'warning');
        return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const member = {
        id: Date.now() + Math.random(), // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        first_name: firstName,
        last_name: lastName,
        age: age,
        gender: gender
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ array
    manualGroupMembers.push(member);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    updateMembersList();
    updateMembersSummary();

    // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    clearMemberForm();

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    Swal.fire({
        title: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        text: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${firstName} ${lastName} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß`,
        icon: 'success',
        timer: 1500,
        showConfirmButton: false
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
function clearMemberForm() {
    document.getElementById('memberFirstName').value = '';
    document.getElementById('memberLastName').value = '';
    document.getElementById('memberAge').value = '';
    document.getElementById('memberGender').value = '';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
function updateMembersList() {
    const membersList = document.getElementById('membersList');
    const memberCount = document.getElementById('memberCount');
    const clearAllBtn = document.querySelector('.clear-all-btn');

    if (!membersList || !memberCount) return;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    memberCount.textContent = manualGroupMembers.length;

    if (manualGroupMembers.length === 0) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏á
        membersList.innerHTML = `
            <div class="empty-members-state">
                <div class="empty-icon">üë•</div>
                <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°</p>
                <p class="empty-hint">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</p>
            </div>
        `;
        if (clearAllBtn) clearAllBtn.style.display = 'none';
    } else {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö Card Layout
        let membersHTML = '';
        manualGroupMembers.forEach((member, index) => {
            const genderText = member.gender === 'male' ? '‡∏ä‡∏≤‡∏¢' :
                member.gender === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' :
                    member.gender === 'other' ? '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' :
                        member.gender ? member.gender : '-';

            membersHTML += `
                <div class="member-item" data-member-id="${member.id}">
                    <div class="member-info">
                        <div class="member-name">${member.first_name} ${member.last_name}</div>
                        <div class="member-details">‡∏≠‡∏≤‡∏¢‡∏∏ ${member.age} ‡∏õ‡∏µ | ${genderText}</div>
                    </div>
                    <div class="member-actions">
                        <button type="button" class="btn-remove-member" onclick="removeMember(${member.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });

        membersList.innerHTML = membersHTML;
        if (clearAllBtn) clearAllBtn.style.display = 'inline-flex';
    }
}

// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateMembersSummary() ‡πÄ‡∏î‡∏¥‡∏°
function updateMembersSummary() {
    const summarySection = document.getElementById('membersSummary');

    if (!summarySection) return;

    if (manualGroupMembers.length === 0) {
        summarySection.style.display = 'none';
        return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const maleCount = manualGroupMembers.filter(m => m.gender === 'male').length;
    const femaleCount = manualGroupMembers.filter(m => m.gender === 'female').length;
    const otherCount = manualGroupMembers.filter(m => m.gender !== 'male' && m.gender !== 'female').length;
    const totalCount = manualGroupMembers.length;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    const totalMaleElement = document.getElementById('totalMaleMembers');
    const totalFemaleElement = document.getElementById('totalFemaleMembers');
    const totalOtherElement = document.getElementById('totalOtherMembers');
    const totalAllElement = document.getElementById('totalAllMembers');

    if (totalMaleElement) totalMaleElement.textContent = maleCount;
    if (totalFemaleElement) totalFemaleElement.textContent = femaleCount;
    if (totalOtherElement) totalOtherElement.textContent = otherCount;
    if (totalAllElement) totalAllElement.textContent = totalCount;

    summarySection.style.display = 'block';

    console.log('Members Summary:', {
        male: maleCount,
        female: femaleCount,
        other: otherCount,
        total: totalCount
    });
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Enter key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
document.addEventListener('keypress', function (e) {
    if (e.key === 'Enter') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const activeElement = document.activeElement;
        const formInputs = ['memberFirstName', 'memberLastName', 'memberAge', 'memberGender'];

        if (formInputs.includes(activeElement.id)) {
            addGroupMember();
        }
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SweetAlert2)
function removeMember(memberId) {
    const memberIndex = manualGroupMembers.findIndex(member => member.id === memberId);
    if (memberIndex === -1) return;

    const member = manualGroupMembers[memberIndex];

    if (typeof Swal !== 'undefined') {
        Swal.fire({
            title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
            text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${member.first_name} ${member.last_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡∏ö',
            cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            confirmButtonColor: '#dc3545'
        }).then((result) => {
            if (result.isConfirmed) {
                // ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
                manualGroupMembers.splice(memberIndex, 1);

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                updateMembersList();
                updateMembersSummary();

                Swal.fire({
                    title: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                    text: `‡∏•‡∏ö ${member.first_name} ${member.last_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß`,
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    } else {
        if (confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${member.first_name} ${member.last_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            // ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
            manualGroupMembers.splice(memberIndex, 1);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            updateMembersList();
            updateMembersSummary();
        }
    }

    console.log('Removed member:', member);
    console.log('Current members:', manualGroupMembers);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SweetAlert2)
function clearAllMembers() {
    if (manualGroupMembers.length === 0) return;

    if (typeof Swal !== 'undefined') {
        Swal.fire({
            title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${manualGroupMembers.length} ‡∏Ñ‡∏ô ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            confirmButtonColor: '#dc3545'
        }).then((result) => {
            if (result.isConfirmed) {
                // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                manualGroupMembers = [];

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                updateMembersList();
                updateMembersSummary();

                Swal.fire({
                    title: '‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                    text: '‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    } else {
        if (confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${manualGroupMembers.length} ‡∏Ñ‡∏ô ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            manualGroupMembers = [];

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            updateMembersList();
            updateMembersSummary();
        }
    }

    console.log('Cleared all members');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô
async function addGroupVisitorManual() {
    const groupName = document.getElementById('groupName').value.trim();
    const groupType = document.getElementById('groupType').value.trim();
    const beaconElement = document.getElementById('groupBeacon');
    const beaconUUID = beaconElement.value;

    // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°
    console.log('=== GROUP REGISTRATION DEBUG ===');
    console.log('groupName:', groupName);
    console.log('groupType:', groupType);
    console.log('beaconElement:', beaconElement);
    console.log('beaconUUID:', beaconUUID);
    console.log('manualGroupMembers:', manualGroupMembers);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!groupName || !groupType || !beaconUUID) {
        Swal.fire('‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å iBeacon', 'warning');
        return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
    if (manualGroupMembers.length === 0) {
        Swal.fire('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô', 'warning');
        return;
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    const groupData = {
        type: 'group',
        group_name: groupName,
        group_type: groupType,
        group_size: manualGroupMembers.length,
        uuid: beaconUUID,
        members: manualGroupMembers,
        registration_method: 'manual' // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    };

    console.log('üì§ Manual group data to be sent:', groupData);

    try {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        Swal.fire({
            title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
            text: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupName} (${groupType}) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${manualGroupMembers.length} ‡∏Ñ‡∏ô`,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch(REGISTER_VISITOR_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(groupData)
        });

        console.log('üì° Group Response status:', response.status);
        console.log('üì° Group Response ok:', response.ok);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Server error response:', errorText);
            Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'error');
            return;
        }

        const result = await response.json();
        console.log('üì• Group Server response:', result);

        if (result.status === 'success') {
            Swal.fire({
                title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                text: `‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupName} (${groupType}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${manualGroupMembers.length} ‡∏Ñ‡∏ô`,
                icon: 'success',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            });

            // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            clearGroupForm();
            if (typeof loadDeviceTableByType === 'function') {
                loadDeviceTableByType();
            }
            if (typeof loadDashboardStats === 'function') {
                loadDashboardStats();
            }

            // ‡πÇ‡∏´‡∏•‡∏î iBeacons ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            await loadIBeacons();

        } else {
            Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ', 'error');
        }

    } catch (error) {
        console.error('‚ùå Error registering manual group:', error);
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`, 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
function clearMemberForm() {
    document.getElementById('memberFirstName').value = '';
    document.getElementById('memberLastName').value = '';
    document.getElementById('memberAge').value = '';
    document.getElementById('memberGender').value = '';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
function updateMembersList() {
    const membersList = document.getElementById('membersList');
    const memberCount = document.getElementById('memberCount');
    const clearAllBtn = document.querySelector('.clear-all-btn');

    if (!membersList || !memberCount) return;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    memberCount.textContent = manualGroupMembers.length;

    if (manualGroupMembers.length === 0) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏á
        membersList.innerHTML = `
            <div class="empty-members-state">
                <div class="empty-icon">üë•</div>
                <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°</p>
                <p class="empty-hint">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</p>
            </div>
        `;
        if (clearAllBtn) clearAllBtn.style.display = 'none';
    } else {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö Card Layout
        let membersHTML = '';
        manualGroupMembers.forEach((member, index) => {
            const genderText = member.gender === 'male' ? '‡∏ä‡∏≤‡∏¢' :
                member.gender === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' :
                    member.gender === 'other' ? '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' :
                        member.gender ? member.gender : '-';

            membersHTML += `
                <div class="member-item" data-member-id="${member.id}">
                    <div class="member-info">
                        <div class="member-name">${member.first_name} ${member.last_name}</div>
                        <div class="member-details">‡∏≠‡∏≤‡∏¢‡∏∏ ${member.age} ‡∏õ‡∏µ | ${genderText}</div>
                    </div>
                    <div class="member-actions">
                        <button type="button" class="btn-remove-member" onclick="removeMember(${member.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });

        membersList.innerHTML = membersHTML;
        if (clearAllBtn) clearAllBtn.style.display = 'inline-flex';
    }
}

// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateMembersSummary() ‡πÄ‡∏î‡∏¥‡∏°
function updateMembersSummary() {
    const summarySection = document.getElementById('membersSummary');

    if (!summarySection) return;

    if (manualGroupMembers.length === 0) {
        summarySection.style.display = 'none';
        return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const maleCount = manualGroupMembers.filter(m => m.gender === 'male').length;
    const femaleCount = manualGroupMembers.filter(m => m.gender === 'female').length;
    const otherCount = manualGroupMembers.filter(m => m.gender !== 'male' && m.gender !== 'female').length;
    const totalCount = manualGroupMembers.length;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    const totalMaleElement = document.getElementById('totalMaleMembers');
    const totalFemaleElement = document.getElementById('totalFemaleMembers');
    const totalOtherElement = document.getElementById('totalOtherMembers');
    const totalAllElement = document.getElementById('totalAllMembers');

    if (totalMaleElement) totalMaleElement.textContent = maleCount;
    if (totalFemaleElement) totalFemaleElement.textContent = femaleCount;
    if (totalOtherElement) totalOtherElement.textContent = otherCount;
    if (totalAllElement) totalAllElement.textContent = totalCount;

    summarySection.style.display = 'block';

    console.log('Members Summary:', {
        male: maleCount,
        female: femaleCount,
        other: otherCount,
        total: totalCount
    });
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Enter key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
document.addEventListener('keypress', function (e) {
    if (e.key === 'Enter') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const activeElement = document.activeElement;
        const formInputs = ['memberFirstName', 'memberLastName', 'memberAge', 'memberGender'];

        if (formInputs.includes(activeElement.id)) {
            addGroupMember();
        }
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SweetAlert2)
function addGroupMember() {
    const firstName = document.getElementById('memberFirstName').value.trim();
    const lastName = document.getElementById('memberLastName').value.trim();
    const age = parseInt(document.getElementById('memberAge').value);
    const gender = document.getElementById('memberGender').value;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!firstName || !lastName || !age || !gender) {
        if (typeof Swal !== 'undefined') {
            Swal.fire('‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'warning');
        } else {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        }
        return;
    }

    if (age < 0 || age > 150) {
        if (typeof Swal !== 'undefined') {
            Swal.fire('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-150 ‡∏õ‡∏µ', 'warning');
        } else {
            alert('‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-150 ‡∏õ‡∏µ');
        }
        return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const member = {
        id: Date.now() + Math.random(), // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        first_name: firstName,
        last_name: lastName,
        age: age,
        gender: gender
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ array
    manualGroupMembers.push(member);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    updateMembersList();
    updateMembersSummary();

    // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    clearMemberForm();

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (typeof Swal !== 'undefined') {
        Swal.fire({
            title: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            text: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${firstName} ${lastName} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß`,
            icon: 'success',
            timer: 1500,
            showConfirmButton: false
        });
    }

    console.log('Added member:', member);
    console.log('Current members:', manualGroupMembers);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SweetAlert2)
function removeMember(memberId) {
    const memberIndex = manualGroupMembers.findIndex(member => member.id === memberId);
    if (memberIndex === -1) return;

    const member = manualGroupMembers[memberIndex];

    if (typeof Swal !== 'undefined') {
        Swal.fire({
            title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
            text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${member.first_name} ${member.last_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡∏ö',
            cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            confirmButtonColor: '#dc3545'
        }).then((result) => {
            if (result.isConfirmed) {
                // ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
                manualGroupMembers.splice(memberIndex, 1);

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                updateMembersList();
                updateMembersSummary();

                Swal.fire({
                    title: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                    text: `‡∏•‡∏ö ${member.first_name} ${member.last_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß`,
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    } else {
        if (confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${member.first_name} ${member.last_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            // ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
            manualGroupMembers.splice(memberIndex, 1);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            updateMembersList();
            updateMembersSummary();
        }
    }

    console.log('Removed member:', member);
    console.log('Current members:', manualGroupMembers);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SweetAlert2)
function clearAllMembers() {
    if (manualGroupMembers.length === 0) return;

    if (typeof Swal !== 'undefined') {
        Swal.fire({
            title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${manualGroupMembers.length} ‡∏Ñ‡∏ô ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            confirmButtonColor: '#dc3545'
        }).then((result) => {
            if (result.isConfirmed) {
                // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                manualGroupMembers = [];

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                updateMembersList();
                updateMembersSummary();

                Swal.fire({
                    title: '‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                    text: '‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    } else {
        if (confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${manualGroupMembers.length} ‡∏Ñ‡∏ô ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            manualGroupMembers = [];

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            updateMembersList();
            updateMembersSummary();
        }
    }

    console.log('Cleared all members');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
function updateMembersSummary() {
    const summarySection = document.getElementById('membersSummary');

    if (!summarySection) return;

    if (manualGroupMembers.length === 0) {
        summarySection.style.display = 'none';
        return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const maleCount = manualGroupMembers.filter(m => m.gender === 'male').length;
    const femaleCount = manualGroupMembers.filter(m => m.gender === 'female').length;
    const otherCount = manualGroupMembers.filter(m => m.gender !== 'male' && m.gender !== 'female').length;
    const totalCount = manualGroupMembers.length;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    document.getElementById('totalMaleMembers').textContent = maleCount;
    document.getElementById('totalFemaleMembers').textContent = femaleCount;
    document.getElementById('totalOtherMembers').textContent = otherCount;
    document.getElementById('totalAllMembers').textContent = totalCount;

    summarySection.style.display = 'block';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô
async function addGroupVisitorManual() {
    const groupName = document.getElementById('groupName').value.trim();
    const groupType = document.getElementById('groupType').value.trim();
    const beaconUUID = document.getElementById('groupBeacon').value;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!groupName || !groupType || !beaconUUID) {
        Swal.fire('‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å iBeacon', 'warning');
        return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
    if (manualGroupMembers.length === 0) {
        Swal.fire('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô', 'warning');
        return;
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    const groupData = {
        type: 'group',
        group_name: groupName,
        group_type: groupType,
        group_size: manualGroupMembers.length,
        uuid: beaconUUID,
        members: manualGroupMembers,
        registration_method: 'manual' // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    };

    console.log('Manual group data to be sent:', groupData);

    try {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        Swal.fire({
            title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
            text: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupName} (${groupType}) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${manualGroupMembers.length} ‡∏Ñ‡∏ô`,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch(REGISTER_VISITOR_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(groupData)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('Server error response:', errorText);
            Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'error');
            return;
        }

        const result = await response.json();

        if (result.status === 'success') {
            Swal.fire({
                title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                text: `‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupName} (${groupType}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${manualGroupMembers.length} ‡∏Ñ‡∏ô`,
                icon: 'success',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            });

            // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            clearGroupForm();
            if (typeof loadDeviceTableByType === 'function') {
                loadDeviceTableByType();
            }
            if (typeof loadDashboardStats === 'function') {
                loadDashboardStats();
            }


        } else {
            Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ', 'error');
        }

    } catch (error) {
        console.error('Error registering manual group:', error);
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`, 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° currentGroupMethod)
async function addGroupVisitor() {
    if (currentGroupMethod === 'file') {
        await addGroupVisitorFromFile();
    } else if (currentGroupMethod === 'manual') {
        await addGroupVisitorManual();
    }
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Drag and Drop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
function setupDragAndDrop() {
    const uploadArea = document.querySelector('.upload-area');
    if (!uploadArea) return;

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('drag-over');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('drag-over');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('drag-over');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFileUpload({ target: { files: files } });
        }
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
function handleFileUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    const validTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
        'application/vnd.ms-excel' // .xls
    ];

    if (!validTypes.includes(file.type)) {
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel (.xlsx ‡∏´‡∏£‡∏∑‡∏≠ .xls) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', 'error');
        event.target.value = ''; // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
        return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
    const uploadArea = document.querySelector('.upload-area');
    const originalContent = uploadArea.innerHTML;
    uploadArea.innerHTML = `
        <div class="upload-icon">‚è≥</div>
        <div class="upload-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå...</div>
    `;

    const reader = new FileReader();
    reader.onload = function (e) {
        try {
            // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
            const workbook = XLSX.read(e.target.result, { type: 'binary' });
            const firstSheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[firstSheetName];
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { range: 2 });

            // Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ:', jsonData.length);
            console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', jsonData);

            // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
            jsonData.forEach((row, index) => {
                console.log(`‡πÅ‡∏ñ‡∏ß ${index + 1}:`, row);

                // ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á
                const columns = Object.keys(row);
                const nameCol = columns.find(col => col.includes('‡∏ä‡∏∑‡πà‡∏≠'));
                const surnameCol = columns.find(col => col.includes('‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'));
                const ageCol = columns.find(col => col.includes('‡∏≠‡∏≤‡∏¢‡∏∏'));
                const genderCol = columns.find(col => col.includes('‡πÄ‡∏û‡∏®'));

                console.log(`  ‡∏ä‡∏∑‡πà‡∏≠: "${row[nameCol]}"`);
                console.log(`  ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: "${row[surnameCol]}"`);
                console.log(`  ‡∏≠‡∏≤‡∏¢‡∏∏: "${row[ageCol]}"`);
                console.log(`  ‡πÄ‡∏û‡∏®: "${row[genderCol]}"`);
            });

            if (jsonData.length === 0) {
                Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤', 'error');
                uploadArea.innerHTML = originalContent;
                return;
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            const requiredColumnPrefixes = ['‡∏ä‡∏∑‡πà‡∏≠', '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', '‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÄ‡∏û‡∏®'];
            const fileColumns = Object.keys(jsonData[0]);
            const missingColumns = requiredColumnPrefixes.filter(prefix =>
                !fileColumns.some(col => col.startsWith(prefix))
            );

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const validationErrors = validateExcelData(jsonData);
            if (validationErrors.length > 0) {
                Swal.fire({
                    title: '‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                    html: validationErrors.join('<br>'),
                    icon: 'warning',
                    confirmButtonText: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà'
                });
                uploadArea.innerHTML = originalContent;
                return;
            }

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            uploadedFileData = processExcelData(jsonData);
            displayFilePreview(uploadedFileData);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            uploadArea.innerHTML = `
                <div class="upload-icon"><i class="fa-regular fa-circle-check"></i></div>
                <div class="upload-text">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ${file.name}</div>
                <div class="upload-hint">‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà</div>
            `;

        } catch (error) {
            console.error('Error reading file:', error);
            Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå', 'error');
            uploadArea.innerHTML = originalContent;
        }
    };

    reader.onerror = function () {
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå', 'error');
        uploadArea.innerHTML = originalContent;
    };

    reader.readAsBinaryString(file);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel
function validateExcelData(data) {
    const errors = [];

    data.forEach((row, index) => {
        const rowNumber = index + 1;

        // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ï‡πá‡∏°‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
        const nameCol = '‡∏ä‡∏∑‡πà‡∏≠ *‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤';
        const surnameCol = '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
        const ageCol = '‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ) *‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç';
        const genderCol = '‡πÄ‡∏û‡∏®';

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠
        if (!row[nameCol] || row[nameCol].toString().trim() === '') {
            errors.push(`‡πÅ‡∏ñ‡∏ß ${rowNumber}: ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ`);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
        if (!row[surnameCol] || row[surnameCol].toString().trim() === '') {
            errors.push(`‡πÅ‡∏ñ‡∏ß ${rowNumber}: ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ`);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏
        const age = row[ageCol];
        if (!age || isNaN(age) || age < 0 || age > 150) {
            errors.push(`‡πÅ‡∏ñ‡∏ß ${rowNumber}: ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0-150`);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏®
        const validGenders = ['‡∏ä‡∏≤‡∏¢', '‡∏´‡∏ç‡∏¥‡∏á', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'];
        if (!row[genderCol] || !validGenders.includes(row[genderCol].toString().trim())) {
            errors.push(`‡πÅ‡∏ñ‡∏ß ${rowNumber}: ‡πÄ‡∏û‡∏®‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏≤‡∏¢, ‡∏´‡∏ç‡∏¥‡∏á, ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ`);
        }
    });

    return errors;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel
function processExcelData(data) {
    return data.map(row => {
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏û‡∏®‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        let gender = row['‡πÄ‡∏û‡∏®'].toString().toLowerCase();
        if (gender === '‡∏ä‡∏≤‡∏¢') gender = 'male';
        else if (gender === '‡∏´‡∏ç‡∏¥‡∏á') gender = 'female';
        else if (gender === '‡∏≠‡∏∑‡πà‡∏ô‡πÜ') gender = 'other';

        return {
            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ - ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ï‡πá‡∏°‡πÜ
            first_name: row['‡∏ä‡∏∑‡πà‡∏≠ *‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤'].toString().trim(),
            last_name: row['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'].toString().trim(),
            age: parseInt(row['‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ) *‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç']),
            gender: gender,
            // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: uuid ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        };
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
function displayFilePreview(data) {
    const preview = document.getElementById('filePreview');
    const previewTable = document.getElementById('previewTable');
    const fileSummary = document.getElementById('fileSummary');

    if (!preview || !previewTable || !fileSummary) {
        console.error('Preview elements not found');
        return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const previewData = data.slice(0, 5);
    let tableHtml = `
        <table class="table" style="font-size: 12px;">
            <thead>
                <tr>
                    <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                    <th>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                    <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
                    <th>‡πÄ‡∏û‡∏®</th>
                </tr>
            </thead>
            <tbody>
    `;

    previewData.forEach(row => {
        const genderText = row.gender === 'male' || row.gender === 'M' ? '‡∏ä‡∏≤‡∏¢' :
            row.gender === 'female' || row.gender === 'F' ? '‡∏´‡∏ç‡∏¥‡∏á' :
                row.gender === 'other' || row.gender === 'O' ? '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' :
                    row.gender ? row.gender : '-';

        tableHtml += `
            <tr>
                <td>${row.first_name}</td>
                <td>${row.last_name}</td>
                <td>${row.age}</td>
                <td>${genderText}</td>
            </tr>
        `;
    });

    tableHtml += '</tbody></table>';

    if (data.length > 5) {
        tableHtml += `<p style="text-align: center; color: #666; margin-top: 10px;">‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${data.length - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>`;
    }

    previewTable.innerHTML = tableHtml;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const maleCount = data.filter(row => row.gender === 'male').length;
    const femaleCount = data.filter(row => row.gender === 'female').length;
    const otherCount = data.filter(row => row.gender === 'other').length;
    const totalCount = data.length;

    fileSummary.innerHTML = `
        <div class="summary-row">
            <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏≤‡∏¢</span>
            <span>${maleCount} ‡∏Ñ‡∏ô</span>
        </div>
        <div class="summary-row">
            <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ç‡∏¥‡∏á</span>
            <span>${femaleCount} ‡∏Ñ‡∏ô</span>
        </div>
        ${otherCount > 0 ? `
        <div class="summary-row">
            <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ:</span>
            <span>${otherCount} ‡∏Ñ‡∏ô</span>
        </div>
        ` : ''}
        <div class="summary-row summary-total">
            <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
            <span>${totalCount} ‡∏Ñ‡∏ô</span>
        </div>
    `;

    preview.style.display = 'block';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡∏•‡πå Excel
async function addGroupVisitorFromFile() {
    const groupName = document.getElementById('groupName').value.trim();
    const groupType = document.getElementById('groupType').value.trim(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° .trim()
    const beaconUUID = document.getElementById('groupBeacon').value;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!groupName || !groupType || !beaconUUID) {
        Swal.fire('‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å iBeacon', 'warning');
        return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    if (!uploadedFileData || uploadedFileData.length === 0) {
        Swal.fire('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Å‡πà‡∏≠‡∏ô', 'warning');
        return;
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    const groupData = {
        type: 'group',
        group_name: groupName,
        group_type: groupType, // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
        group_size: uploadedFileData.length,
        uuid: beaconUUID,
        members: uploadedFileData,
        registration_method: 'excel' // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    };

    console.log('Group data to be sent:', groupData);

    try {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        Swal.fire({
            title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
            text: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupName} (${groupType}) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${uploadedFileData.length} ‡∏Ñ‡∏ô`,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch(REGISTER_VISITOR_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(groupData)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('Server error response:', errorText);
            Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'error');
            return;
        }

        const result = await response.json();

        if (result.status === 'success') {
            Swal.fire({
                title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                text: `‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupName} (${groupType}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${uploadedFileData.length} ‡∏Ñ‡∏ô`,
                icon: 'success',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            });

            // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            clearGroupForm();
            fetchVisitors(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        } else {
            Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ', 'error');
        }

    } catch (error) {
        console.error('Error registering group:', error);
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`, 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°
function clearGroupForm() {
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    document.getElementById('groupName').value = '';
    document.getElementById('groupType').value = ''; // input text ‡πÅ‡∏ó‡∏ô select
    document.getElementById('groupBeacon').value = '';

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
    uploadedFileData = null;
    const fileInput = document.getElementById('excelFile');
    if (fileInput) fileInput.value = '';

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô
    manualGroupMembers = [];
    updateMembersList();
    updateMembersSummary();
    clearMemberForm();

    // ‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const preview = document.getElementById('filePreview');
    if (preview) preview.style.display = 'none';

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï upload area
    const uploadArea = document.querySelector('.upload-area');
    if (uploadArea) {
        uploadArea.innerHTML = `
            <div class="upload-icon">üìÅ</div>
            <div class="upload-text">‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</div>
            <div class="upload-hint">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .xlsx, .xls ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</div>
            <input type="file" id="excelFile" class="file-input" accept=".xlsx,.xls" onchange="handleFileUpload(event)">
        `;
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
function validateGroupType(groupType) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
    if (groupType.length < 2 || groupType.length > 100) {
        return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î)
    const allowedPattern = /^[‡∏Å-‡∏Æ‡∏∞-‡πåa-zA-Z0-9\s\-\/()]+$/;
    return allowedPattern.test(groupType);
}

function setupGroupTypeInput() {
    const groupTypeInput = document.getElementById('groupType');
    if (!groupTypeInput) return;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠ focus
    groupTypeInput.addEventListener('focus', function () {
        // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip ‡∏´‡∏£‡∏∑‡∏≠ hint ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        this.placeholder = '‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏ï‡πâ‡∏ô, ‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß, ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC';
    });

    groupTypeInput.addEventListener('blur', function () {
        this.placeholder = '‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°';
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö real-time (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    groupTypeInput.addEventListener('input', function () {
        const value = this.value.trim();
        if (value && !validateGroupType(value)) {
            this.style.borderColor = '#ff6b6b';
        } else {
            this.style.borderColor = '';
        }
    });
}

// Summary method functions
function updateSummary() {
    const ageGroups = [
        { prefix: 'age0_5', label: '0-5 ‡∏õ‡∏µ' },
        { prefix: 'age6_11', label: '6-11 ‡∏õ‡∏µ' },
        { prefix: 'age12_17', label: '12-17 ‡∏õ‡∏µ' },
        { prefix: 'age18_59', label: '18-59 ‡∏õ‡∏µ' },
        { prefix: 'age60', label: '60+ ‡∏õ‡∏µ' }
    ];

    let totalMale = 0;
    let totalFemale = 0;

    ageGroups.forEach(group => {
        const maleInput = document.getElementById(group.prefix + '_male');
        const femaleInput = document.getElementById(group.prefix + '_female');

        totalMale += parseInt(maleInput.value) || 0;
        totalFemale += parseInt(femaleInput.value) || 0;
    });

    const totalMembers = totalMale + totalFemale;

    document.getElementById('totalMale').textContent = `${totalMale} ‡∏Ñ‡∏ô`;
    document.getElementById('totalFemale').textContent = `${totalFemale} ‡∏Ñ‡∏ô`;
    document.getElementById('totalMembers').textContent = `${totalMembers} ‡∏Ñ‡∏ô`;
}

function applyVisitorFilter() {
    const selectedFilter = document.getElementById('typeFilter').value;
    fetchVisitors(selectedFilter);
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetchVisitors() ‡πÉ‡∏ô visitor-register.js

async function fetchVisitors(filter = 'all') {
    const visitorsTableHead = document.querySelector('.table thead');
    const visitorsTableBody = document.getElementById('visitorsTable');

    if (!visitorsTableBody) {
        console.error('Visitors table body not found');
        return;
    }

    visitorsTableBody.innerHTML = `<tr><td colspan="10" style="text-align: center;">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°...</td></tr>`;

    try {
        const url = `../../backend/staff/api/get_visitors.php?type=${filter}`;
        const response = await fetch(url, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });

        const result = await response.json();

        if (result.status !== 'success' || !Array.isArray(result.data)) {
            visitorsTableBody.innerHTML = `<tr><td colspan="10" style="text-align: center; color: orange;">‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</td></tr>`;
            return;
        }

        let data = result.data;

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î header ‡∏ï‡∏≤‡∏° filter
        let theadHTML = '';
        if (filter === 'individual') {
            theadHTML = `
                <tr>
                    <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                    <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
                    <th>‡πÄ‡∏û‡∏®</th>
                    <th>Tag</th>
                    <th>UUID</th>
                </tr>`;
        } else if (filter === 'group') {
            theadHTML = `
                <tr>
                    <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</th>
                    <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
                    <th>‡πÄ‡∏û‡∏®</th>
                    <th>Tag</th>
                    <th>UUID</th>
                </tr>`;
        } else {
            theadHTML = `
                <tr>
                    <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠/‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°</th>
                    <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
                    <th>‡πÄ‡∏û‡∏®</th>
                    <th>Tag</th>
                    <th>UUID</th>
                </tr>`;
        }

        visitorsTableHead.innerHTML = theadHTML;
        visitorsTableBody.innerHTML = '';

        if (data.length === 0) {
            visitorsTableBody.innerHTML = `<tr><td colspan="10" style="text-align: center;">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>`;
            return;
        }

        data.forEach(visitor => {
            // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏û‡∏®‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            const formatGender = (genderValue) => {
                if (!genderValue) return '-';

                const cleanGender = genderValue.toString().trim().toLowerCase();

                switch (cleanGender) {
                    case 'male':
                    case 'm':
                        return '‡∏ä‡∏≤‡∏¢';
                    case 'female':
                    case 'f':
                        return '‡∏´‡∏ç‡∏¥‡∏á';
                    case 'other':
                    case 'o':
                        return '‡∏≠‡∏∑‡πà‡∏ô‡πÜ';
                    default:
                        console.log('Unknown gender value:', genderValue);
                        return genderValue;
                }
            };

            const gender = formatGender(visitor.gender);
            const tag = visitor.tag_name || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠';
            const uuid = visitor.uuid || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';

            let row = '';

            if (filter === 'individual') {
                row = `
                    <tr>
                        <td>${visitor.name || visitor.first_name + ' ' + visitor.last_name}</td>
                        <td>${visitor.age || '-'}</td>
                        <td>${gender}</td>
                        <td>${tag}</td>
                        <td>${uuid}</td>
                    </tr>`;
            } else if (filter === 'group') {
                if (visitor.type === 'group') {
                    const ageRange = visitor.min_age && visitor.max_age ? `${visitor.min_age}-${visitor.max_age}` : '-';

                    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏û‡∏®‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏° other_count
                    let genderSummary = `M${visitor.male_count || 0} F${visitor.female_count || 0}`;
                    if (visitor.other_count && visitor.other_count > 0) {
                        genderSummary += ` O${visitor.other_count}`;
                    }

                    row = `
                        <tr style="background-color: #f8f9fa; font-weight: bold;">
                            <td>‡∏Å‡∏•‡∏∏‡πà‡∏°</td>
                            <td>${visitor.group_name || visitor.name}</td>
                            <td>${ageRange}</td>
                            <td>${genderSummary}</td>
                            <td>${tag}</td>
                            <td>${uuid}</td>
                        </tr>`;
                } else if (visitor.type === 'group_member') {
                    row = `
                        <tr>
                            <td>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</td>
                            <td>${visitor.name}</td>
                            <td>${visitor.age || '-'}</td>
                            <td>${gender}</td>
                            <td>${tag}</td>
                            <td>${uuid}</td>
                        </tr>`;
                }
            } else {
                const isGroup = visitor.type === 'group';

                if (isGroup) {
                    const ageRange = visitor.min_age && visitor.max_age ? `${visitor.min_age}-${visitor.max_age}` : '-';

                    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏û‡∏®‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏° other_count
                    let genderSummary = `M${visitor.male_count || 0} F${visitor.female_count || 0}`;
                    if (visitor.other_count && visitor.other_count > 0) {
                        genderSummary += ` O${visitor.other_count}`;
                    }

                    row = `
                        <tr>
                            <td>‡∏Å‡∏•‡∏∏‡πà‡∏°</td>
                            <td>${visitor.group_name || visitor.name}</td>
                            <td>${ageRange}</td>
                            <td>${genderSummary}</td>
                            <td>${tag}</td>
                            <td>${uuid}</td>
                        </tr>`;
                } else {
                    row = `
                        <tr>
                            <td>‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß</td>
                            <td>${visitor.name || visitor.first_name + ' ' + visitor.last_name}</td>
                            <td>${visitor.age || '-'}</td>
                            <td>${gender}</td>
                            <td>${tag}</td>
                            <td>${uuid}</td>
                        </tr>`;
                }
            }

            visitorsTableBody.innerHTML += row;
        });

    } catch (error) {
        visitorsTableBody.innerHTML = `<tr><td colspan="10" style="text-align: center; color: red;">‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}</td></tr>`;
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`, 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ filter
function applyVisitorFilter() {
    const selectedFilter = document.getElementById('typeFilter').value;
    fetchVisitors(selectedFilter);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Sidebar
function loadUserProfile() {
    const profileName = document.getElementById("profileName");
    const profileRole = document.getElementById("profileRole");
    const sidebarLoginTime = document.getElementById("sidebarLoginTime");

    if (!profileName || !profileRole || !sidebarLoginTime) {
        console.warn('Warning: Sidebar profile elements not found.');
        return;
    }

    const firstname = localStorage.getItem("firstname");
    const lastname = localStorage.getItem("lastname");
    const role = localStorage.getItem("role");
    const loginTime = localStorage.getItem("loginTime");

    if (firstname && lastname) {
        profileName.textContent = `‡∏Ñ‡∏∏‡∏ì${firstname} ${lastname}`;
    } else {
        profileName.textContent = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
    }

    if (role) {
        const roleText = {
            admin: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
            manager: "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£",
            staff: "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
        };
        profileRole.textContent = roleText[role] || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
    } else {
        profileRole.textContent = '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }

    if (loginTime) {
        sidebarLoginTime.textContent = `‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: ${loginTime}`;
    } else {
        sidebarLoginTime.textContent = '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: --:--';
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Logout
function logout() {
    Swal.fire({
        title: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
        text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
        cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        confirmButtonColor: '#dc3545'
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire(
                '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
                'success'
            ).then(() => {
                localStorage.clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• localStorage
                window.location.href = '../login.html'; // Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
            });
        }
    });
}

function downloadTemplate() {
    window.location.href = '../../assets/template/template-visitor.xlsx';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
document.addEventListener("DOMContentLoaded", function () {
    loadUserProfile();
    setupBirthdateInput();
    loadIBeacons(); // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    fetchVisitors();
    setupDragAndDrop();
    setupGroupTypeInput();
});
